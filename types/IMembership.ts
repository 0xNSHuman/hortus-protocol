/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IMembershipInterface extends utils.Interface {
  contractName: "IMembership";
  functions: {
    "claimRewards()": FunctionFragment;
    "subscribe()": FunctionFragment;
    "subscriptionExpiration()": FunctionFragment;
    "totalRewardsAccumulated()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "subscribe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "subscriptionExpiration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardsAccumulated",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardsAccumulated",
    data: BytesLike
  ): Result;

  events: {
    "NewSubscription(address,uint256)": EventFragment;
    "RewardsClaim(address,uint256)": EventFragment;
    "SubscriptionExtension(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewSubscription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionExtension"): EventFragment;
}

export type NewSubscriptionEvent = TypedEvent<
  [string, BigNumber],
  { supporter: string; expiration: BigNumber }
>;

export type NewSubscriptionEventFilter = TypedEventFilter<NewSubscriptionEvent>;

export type RewardsClaimEvent = TypedEvent<
  [string, BigNumber],
  { supporter: string; amount: BigNumber }
>;

export type RewardsClaimEventFilter = TypedEventFilter<RewardsClaimEvent>;

export type SubscriptionExtensionEvent = TypedEvent<
  [BigNumber, BigNumber],
  { tokenId: BigNumber; expiration: BigNumber }
>;

export type SubscriptionExtensionEventFilter =
  TypedEventFilter<SubscriptionExtensionEvent>;

export interface IMembership extends BaseContract {
  contractName: "IMembership";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMembershipInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subscribe(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subscriptionExpiration(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRewardsAccumulated(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  claimRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subscribe(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subscriptionExpiration(overrides?: CallOverrides): Promise<BigNumber>;

  totalRewardsAccumulated(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    claimRewards(overrides?: CallOverrides): Promise<void>;

    subscribe(overrides?: CallOverrides): Promise<void>;

    subscriptionExpiration(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardsAccumulated(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "NewSubscription(address,uint256)"(
      supporter?: string | null,
      expiration?: BigNumberish | null
    ): NewSubscriptionEventFilter;
    NewSubscription(
      supporter?: string | null,
      expiration?: BigNumberish | null
    ): NewSubscriptionEventFilter;

    "RewardsClaim(address,uint256)"(
      supporter?: string | null,
      amount?: BigNumberish | null
    ): RewardsClaimEventFilter;
    RewardsClaim(
      supporter?: string | null,
      amount?: BigNumberish | null
    ): RewardsClaimEventFilter;

    "SubscriptionExtension(uint256,uint256)"(
      tokenId?: BigNumberish | null,
      expiration?: null
    ): SubscriptionExtensionEventFilter;
    SubscriptionExtension(
      tokenId?: BigNumberish | null,
      expiration?: null
    ): SubscriptionExtensionEventFilter;
  };

  estimateGas: {
    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subscribe(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subscriptionExpiration(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardsAccumulated(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subscribe(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subscriptionExpiration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRewardsAccumulated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
