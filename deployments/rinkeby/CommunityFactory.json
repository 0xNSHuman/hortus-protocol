{
  "address": "0xA1af0e9FA6e48192d110159983e7F0C5C2270070",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feeNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeDenominator",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "community",
          "type": "address"
        }
      ],
      "name": "CommunityDeployment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeDenominator",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "setter",
          "type": "address"
        }
      ],
      "name": "ProtocolFeePolicyUpdate",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "commerceToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "membershipPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "membershipPeriod",
          "type": "uint256"
        }
      ],
      "name": "createCommunity",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeePolicy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feeNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeDenominator",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        }
      ],
      "name": "setProtocolFeePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xba67dc588c35b0140217f72bf668405912d58727a997c2e4a29c60270c1507c5",
  "receipt": {
    "to": null,
    "from": "0xC0a6Ec33a47274E293741CAb4716447A1876CB6F",
    "contractAddress": "0xA1af0e9FA6e48192d110159983e7F0C5C2270070",
    "transactionIndex": 16,
    "gasUsed": "3055671",
    "logsBloom": "0x
    "blockHash": "0xc9db32c0298a759a7a17f85ac2760a053c484089263078230dde1caf13b66a02",
    "transactionHash": "0xba67dc588c35b0140217f72bf668405912d58727a997c2e4a29c60270c1507c5",
    "logs": [],
    "blockNumber": 10378517,
    "cumulativeGasUsed": "10410834",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1",
    "100",
    "0xC0670B1C4bfb65b43f45c781A0F190Cdc4Bf587E",
    "0xC0a6Ec33a47274E293741CAb4716447A1876CB6F"
  ],
  "numDeployments": 1,
  "solcInputHash": "5ccfcb906adfc956312da13458a5702a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"community\",\"type\":\"address\"}],\"name\":\"CommunityDeployment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeDenominator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"}],\"name\":\"ProtocolFeePolicyUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"commerceToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"membershipPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"membershipPeriod\",\"type\":\"uint256\"}],\"name\":\"createCommunity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePolicy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"}],\"name\":\"setProtocolFeePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createCommunity(string,string,address,uint256,uint256)\":{\"notice\":\"Deploy new community\"},\"protocolFeePolicy()\":{\"notice\":\"Get current protocol fee policy\"},\"setProtocolFeePolicy(uint256,uint256,address,address)\":{\"notice\":\"Set protocol fee policy\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CommunityFactory.sol\":\"CommunityFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/CommunityFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/ICommunityDeployment.sol\\\";\\nimport \\\"./interfaces/IProtocolPolicy.sol\\\";\\nimport \\\"./CommunityVault.sol\\\";\\n\\ncontract CommunityFactory is ICommunityDeployment, IProtocolPolicy {\\n    /* TYPES */\\n\\n    struct FeePolicy {\\n        uint feeNumerator;\\n        uint feeDenominator;\\n        address receiver;\\n        address setter;\\n    }\\n\\n    /* STATE */\\n\\n    FeePolicy private _protocolFeePolicy;\\n\\n    constructor(\\n        uint feeNumerator,\\n        uint feeDenominator,\\n        address feeReceiver,\\n        address feeSetter\\n    ) {\\n        _setProtocolFeePolicy(\\n            feeNumerator,\\n            feeDenominator,\\n            feeReceiver,\\n            feeSetter\\n        );\\n    }\\n\\n    /* EXTERNAL FUNCTIONS */\\n\\n    /** \\n    @notice Deploy new community\\n    */\\n    function createCommunity(\\n        string calldata symbol,\\n        string calldata name,\\n        address commerceToken, \\n        uint membershipPrice,\\n        uint membershipPeriod\\n    ) override external returns (address) {\\n        address community = address(\\n            new CommunityVault(\\n                symbol,\\n                name,\\n                commerceToken,\\n                membershipPrice,\\n                membershipPeriod\\n            )\\n        );\\n\\n        emit CommunityDeployment(msg.sender, community);\\n\\n        return community;\\n    }\\n\\n    /**\\n    @notice Set protocol fee policy\\n     */\\n    function setProtocolFeePolicy(\\n        uint feeNumerator,\\n        uint feeDenominator,\\n        address receiver,\\n        address setter\\n    ) override external {\\n        require(msg.sender == _protocolFeePolicy.setter, 'Access Denied');\\n\\n        _setProtocolFeePolicy(\\n            feeNumerator,\\n            feeDenominator,\\n            receiver,\\n            setter\\n        );\\n\\n        emit ProtocolFeePolicyUpdate(\\n            feeNumerator,\\n            feeDenominator,\\n            receiver,\\n            setter\\n        );\\n    }\\n\\n    /* PRIVATE FUNCTIONS */\\n\\n    /**\\n    @notice Set protocol fee policy (called indirectly from public/external functions)\\n     */\\n    function _setProtocolFeePolicy(\\n        uint feeNumerator,\\n        uint feeDenominator,\\n        address receiver,\\n        address setter\\n    ) private {\\n        require(feeDenominator > 0, \\\"Invalid fraction\\\");\\n        require(!(feeNumerator > 0 && receiver == address(0)), \\\"Cannot burn fees\\\");\\n        require(setter != address(0), \\\"Invalid setter\\\");\\n        \\n        _protocolFeePolicy = FeePolicy(\\n            feeNumerator,\\n            feeDenominator,\\n            receiver,\\n            setter\\n        );\\n    }\\n\\n    /* VIEW FUNCTIONS */\\n\\n    /** \\n    @notice Get current protocol fee policy\\n    */\\n    function protocolFeePolicy() override external view returns (uint, uint, address, address) {\\n        return (\\n            _protocolFeePolicy.feeNumerator,\\n            _protocolFeePolicy.feeDenominator,\\n            _protocolFeePolicy.receiver,\\n            _protocolFeePolicy.setter\\n        );\\n    }\\n}\",\"keccak256\":\"0xb107a39f6d7cfbbd82d659d1092e32e8c17e715efbb6fcd5334c81dc96556769\",\"license\":\"MIT\"},\"contracts/CommunityVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IProtocolPolicy.sol\\\";\\nimport \\\"./interfaces/ICommunity.sol\\\";\\nimport \\\"./interfaces/ICreatorAccess.sol\\\";\\nimport \\\"./interfaces/IMembership.sol\\\";\\n\\ncontract CommunityVault is ERC721Enumerable, \\nOwnable,\\nICommunity,\\nICreatorAccess,\\nIMembership,\\nReentrancyGuard {\\n    /* TYPES */\\n\\n    using SafeMath for uint;\\n    using Counters for Counters.Counter;\\n    using SafeERC20 for IERC20;\\n\\n    /* STATE */\\n\\n    address public factory;\\n    address public commerceToken;\\n    uint public membershipPrice;\\n    uint public membershipPeriod;\\n    string public profileURI;\\n    Counters.Counter private _tokenIdCounter;\\n    mapping(uint => uint) private _membershipExpirations;\\n    mapping(address => uint) private _creatorFunds;\\n\\n    constructor(\\n        string memory symbol,\\n        string memory name,\\n        address _commerceToken,\\n        uint _membershipPrice,\\n        uint _membershipPeriod\\n    ) ERC721(\\n        name, symbol\\n    ) {\\n        require(bytes(symbol).length != 0, \\\"Empty symbol\\\");\\n        require(bytes(name).length != 0, \\\"Empty name\\\");\\n        require(_membershipPeriod > 0, \\\"Invalid period\\\");\\n\\n        factory = msg.sender;\\n        transferOwnership(tx.origin);\\n\\n        commerceToken = _commerceToken;\\n        membershipPrice = _membershipPrice;\\n        membershipPeriod = _membershipPeriod;\\n    }\\n\\n    /* EXTERNAL FUNCTIONS */\\n\\n    /** \\n    @notice Update community membership settings\\n    */\\n    function configureMembership(address _commerceToken, uint _membershipPrice, uint _membershipPeriod) override external onlyOwner {\\n        require(_membershipPeriod > 0, \\\"Invalid period\\\");\\n\\n        commerceToken = _commerceToken;\\n        membershipPrice = _membershipPrice;\\n        membershipPeriod = _membershipPeriod;\\n\\n        emit MembershipConfigurationUpdate(_commerceToken, _membershipPrice, _membershipPeriod);\\n    }\\n\\n    /**\\n    @notice Update community profile data\\n    */\\n    function updateProfile(string calldata uri) override external onlyOwner {\\n        profileURI = uri;\\n        emit ProfileUpdate(uri);\\n    }\\n\\n    /** \\n    @notice Withdraw the payments accumulated for creator\\n    */\\n    function withdrawCreatorRewards(address token) override external onlyOwner nonReentrant {\\n        uint amount = _creatorFunds[token];\\n\\n        if (amount == 0) { return; }\\n\\n        _creatorFunds[token] = 0;\\n\\n        if (token == address(0)) {\\n            _transferTo(payable(msg.sender), amount);\\n        } else {\\n            IERC20(token).safeIncreaseAllowance(address(this), amount);\\n            IERC20(token).safeTransfer(msg.sender, amount);\\n        }\\n\\n        emit CreatorRewardsWithdrawal(msg.sender, token, amount);\\n    }\\n\\n    /** \\n    @notice Purchase membership\\n    */\\n    function subscribe() override nonReentrant external payable {\\n        (uint feeNumerator, uint feeDenominator, address feeReceiver, ) = IProtocolPolicy(factory).protocolFeePolicy();\\n        uint fee;\\n\\n        if (feeNumerator == 0) {\\n            fee = 0;\\n        } else {\\n            fee = membershipPrice.mul(feeNumerator).div(feeDenominator);\\n        }\\n\\n        uint creatorReward = membershipPrice.sub(fee);\\n        _creatorFunds[commerceToken] = _creatorFunds[commerceToken].add(creatorReward);\\n\\n        if (commerceToken == address(0)) {\\n            require(msg.value == membershipPrice, \\\"Price not matched\\\");\\n            _transferTo(payable(feeReceiver), fee);\\n        } else {\\n            _chargeWithERC20(creatorReward, fee, payable(feeReceiver));\\n        }\\n\\n        _extendSubscription();\\n    }\\n\\n    /* PRIVATE FUNCTIONS */\\n\\n    /** \\n    @notice Purchase membership with an ERC-20 token\\n    */\\n    function _chargeWithERC20(uint creatorReward, uint fee, address payable feeReceiver) private {\\n        require(msg.value == 0, \\\"ETH not accepted\\\");\\n        require(IERC20(commerceToken).allowance(msg.sender, address(this)) >= membershipPrice, \\\"Insufficient allowance\\\");\\n        IERC20(commerceToken).safeTransferFrom(msg.sender, address(this), creatorReward);\\n        IERC20(commerceToken).safeTransferFrom(msg.sender, feeReceiver, fee);\\n    }\\n\\n    /** \\n    @notice Transfer ETH\\n    */\\n    function _transferTo(address payable to, uint value) private {\\n        (bool sent, ) = to.call{value: value}(\\\"\\\");\\n        assert(sent);\\n    }\\n\\n    /**\\n    @notice Create or extend subscription\\n    */\\n    function _extendSubscription() private {\\n        require(balanceOf(msg.sender) <= 1, \\\"Duplicate NFTs\\\");\\n\\n        bool isNew;\\n        uint tokenId;\\n        if (balanceOf(msg.sender) == 1) {\\n            tokenId = tokenOfOwnerByIndex(msg.sender, 0);\\n        } else { \\n            isNew = true;\\n            tokenId = _tokenIdCounter.current();\\n            _safeMint(msg.sender);\\n        }\\n\\n        uint expiration = _membershipExpirations[tokenId];\\n        if (expiration > block.number) {\\n            expiration = expiration.add(membershipPeriod);\\n        } else {\\n            expiration = block.number.add(membershipPeriod);\\n        }\\n\\n        _membershipExpirations[tokenId] = expiration;\\n\\n        if (isNew) {\\n            emit NewSubscription(tokenId, expiration);\\n        } else {\\n            emit SubscriptionExtension(tokenId, expiration);\\n        }\\n    }\\n\\n    /** \\n    @notice Mint ERC-721 token\\n    */\\n    function _safeMint(address to) private {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(to, tokenId);\\n    }\\n\\n    /* VIEW FUNCTIONS */\\n\\n    /** \\n    @notice Get total withdrawable amount for creator\\n    */\\n    function totalCreatorRewardsAccumulated(address token) override external view returns (uint) {\\n        return _creatorFunds[token];\\n    }\\n\\n    /** \\n    @notice Get subscription expiration date\\n    */\\n    function subscriptionExpiration(uint tokenId) override external view returns (uint) {\\n        return _membershipExpirations[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0xd030b362b2f806f79ec25961c58a24588de9f25364f13e8ec5574ec37c3a5d1a\",\"license\":\"MIT\"},\"contracts/interfaces/ICommunity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICommunity {\\n    event ProfileUpdate(string indexed uri);\\n    \\n    function updateProfile(string calldata uri) external;\\n}\",\"keccak256\":\"0xa39af6007ae016b822b306c0e15c26abbfa420bc608e5386357e67a06003e862\",\"license\":\"MIT\"},\"contracts/interfaces/ICommunityDeployment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICommunityDeployment {\\n    event CommunityDeployment(address indexed creator, address indexed community);\\n\\n    function createCommunity(\\n        string calldata symbol,\\n        string calldata name,\\n        address commerceToken, \\n        uint membershipPrice,\\n        uint membershipPeriod\\n    ) external returns (address);\\n}\",\"keccak256\":\"0x208441b1308e6881d5b589d2c9140106c61d93dc3bcaa0ea90f034738136b1dd\",\"license\":\"MIT\"},\"contracts/interfaces/ICreatorAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICreatorAccess {\\n    event CreatorRewardsWithdrawal(address indexed creator, address indexed token, uint indexed amount);\\n    \\n    function withdrawCreatorRewards(address token) external;\\n    \\n    function totalCreatorRewardsAccumulated(address token) external view returns (uint);\\n}\",\"keccak256\":\"0x9786096c5d2db35d6ae1a75796ae309dbe83fed268f1ba7cb6bcc74c9a57bb96\",\"license\":\"MIT\"},\"contracts/interfaces/IMembership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMembership {\\n    event MembershipConfigurationUpdate(address indexed commerceToken, uint indexed membershipPrice, uint indexed membershipPeriod);\\n    event NewSubscription(uint indexed tokenId, uint indexed expiration);\\n    event SubscriptionExtension(uint indexed tokenId, uint indexed expiration);\\n    event RewardsClaim(address indexed supporter, uint indexed amount);\\n\\n    function configureMembership(address _commerceToken, uint _membershipPrice, uint _membershipPeriod) external;\\n    function subscribe() external payable;\\n\\n    function subscriptionExpiration(uint tokenId) external view returns (uint);\\n}\",\"keccak256\":\"0x31d9380685735b46372f21f04872b7d06d8725d18ebdd77b784cbfd516adc6eb\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IProtocolPolicy {\\n    event ProtocolFeePolicyUpdate(\\n        uint feeNumerator,\\n        uint feeDenominator,\\n        address indexed receiver,\\n        address indexed setter\\n    );\\n\\n    function setProtocolFeePolicy(\\n        uint feeNumerator,\\n        uint feeDenominator,\\n        address receiver,\\n        address setter\\n    ) external;\\n\\n    function protocolFeePolicy() external view returns (uint, uint, address, address);\\n}\",\"keccak256\":\"0x296502140b54e94c85ee9b995e1006b72beffffc6c4dc03320b3400f0bfdd7c0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161368a38038061368a83398101604081905261002f916101a6565b61003b84848484610044565b505050506101eb565b6000831161008c5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b210333930b1ba34b7b760811b60448201526064015b60405180910390fd5b6000841180156100a357506001600160a01b038216155b156100e35760405162461bcd60e51b815260206004820152601060248201526f43616e6e6f74206275726e206665657360801b6044820152606401610083565b6001600160a01b03811661012a5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b2ba3a32b960911b6044820152606401610083565b60408051608081018252858152602081018590526001600160a01b03938416918101829052919092166060909101819052600093909355600191909155600280546001600160a01b03199081169092179055600380549091169091179055565b80516001600160a01b03811681146101a157600080fd5b919050565b600080600080608085870312156101bb578384fd5b84519350602085015192506101d26040860161018a565b91506101e06060860161018a565b905092959194509250565b613490806101fa6000396000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c80636df8fd3f146200004b5780639627a2e3146200008b578063d9e87c4a14620000a4575b600080fd5b6000546001546002546003546040805194855260208501939093526001600160a01b03918216928401929092521660608201526080015b60405180910390f35b620000a26200009c36600462000471565b620000d4565b005b620000bb620000b5366004620003d8565b6200018f565b6040516001600160a01b03909116815260200162000082565b6003546001600160a01b03163314620001245760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b60448201526064015b60405180910390fd5b62000132848484846200021c565b806001600160a01b0316826001600160a01b03167f1f1a6e9cda3dbc1ab1cd61b7e88be1d2e08fe0604b708e0385810599f1b64a48868660405162000181929190918252602082015260400190565b60405180910390a350505050565b60008088888888888888604051620001a79062000364565b620001b99796959493929190620004e4565b604051809103906000f080158015620001d6573d6000803e3d6000fd5b506040519091506001600160a01b0382169033907fb318a2b19279938a77fca24073110805b3b1d7c0b96651e064ad4d536ec1d33590600090a398975050505050505050565b60008311620002615760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b210333930b1ba34b7b760811b60448201526064016200011b565b6000841180156200027957506001600160a01b038216155b15620002bb5760405162461bcd60e51b815260206004820152601060248201526f43616e6e6f74206275726e206665657360801b60448201526064016200011b565b6001600160a01b038116620003045760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b2ba3a32b960911b60448201526064016200011b565b60408051608081018252858152602081018590526001600160a01b03938416918101829052919092166060909101819052600093909355600191909155600280546001600160a01b03199081169092179055600380549091169091179055565b612f22806200053983390190565b80356001600160a01b03811681146200038a57600080fd5b919050565b60008083601f840112620003a1578182fd5b5081356001600160401b03811115620003b8578182fd5b602083019150836020828501011115620003d157600080fd5b9250929050565b600080600080600080600060a0888a031215620003f3578283fd5b87356001600160401b03808211156200040a578485fd5b620004188b838c016200038f565b909950975060208a013591508082111562000431578485fd5b50620004408a828b016200038f565b90965094506200045590506040890162000372565b9250606088013591506080880135905092959891949750929550565b6000806000806080858703121562000487578384fd5b8435935060208501359250620004a06040860162000372565b9150620004b06060860162000372565b905092959194509250565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60a081526000620004fa60a08301898b620004bb565b82810360208401526200050f81888a620004bb565b6001600160a01b039690961660408401525050606081019290925260809091015294935050505056fe60806040523480156200001157600080fd5b5060405162002f2238038062002f22833981016040819052620000349162000415565b8351849086906200004d906000906020850190620002bc565b50805162000063906001906020840190620002bc565b505050620000806200007a6200019560201b60201c565b62000199565b6001600b558451620000c85760405162461bcd60e51b815260206004820152600c60248201526b115b5c1d1e481cde5b589bdb60a21b60448201526064015b60405180910390fd5b8351620001055760405162461bcd60e51b815260206004820152600a602482015269456d707479206e616d6560b01b6044820152606401620000bf565b60008111620001485760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c195c9a5bd960921b6044820152606401620000bf565b600c80546001600160a01b031916331790556200016532620001eb565b600d80546001600160a01b0319166001600160a01b039490941693909317909255600e55600f5550620005029050565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600a546001600160a01b03163314620002475760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000bf565b6001600160a01b038116620002ae5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620000bf565b620002b98162000199565b50565b828054620002ca90620004af565b90600052602060002090601f016020900481019282620002ee576000855562000339565b82601f106200030957805160ff191683800117855562000339565b8280016001018555821562000339579182015b82811115620003395782518255916020019190600101906200031c565b50620003479291506200034b565b5090565b5b808211156200034757600081556001016200034c565b600082601f83011262000373578081fd5b81516001600160401b0380821115620003905762000390620004ec565b604051601f8301601f19908116603f01168101908282118183101715620003bb57620003bb620004ec565b81604052838152602092508683858801011115620003d7578485fd5b8491505b83821015620003fa5785820183015181830184015290820190620003db565b838211156200040b57848385830101525b9695505050505050565b600080600080600060a086880312156200042d578081fd5b85516001600160401b038082111562000444578283fd5b6200045289838a0162000362565b9650602088015191508082111562000468578283fd5b50620004778882890162000362565b604088015190955090506001600160a01b038116811462000496578182fd5b6060870151608090970151959894975095949392505050565b600181811c90821680620004c457607f821691505b60208210811415620004e657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b612a1080620005126000396000f3fe60806040526004361061015c5760003560e01c80629299e31461016157806301ffc9a71461018357806306fdde03146101b8578063079a361a146101da578063081812fc14610212578063095ea7b3146102325780630de3226b146102525780630fce16961461027657806318160ddd1461028c57806323b872dd146102a15780632f745c59146102c157806342842e0e146102e15780634f6ccce7146103015780636352211e146103215780636533fce61461034157806370a082311461036157806370fa23c714610381578063715018a6146103ae5780638da5cb5b146103c35780638f449a05146103d857806395d89b41146103e0578063963310af146103f5578063a22cb4651461040a578063b88d4fde1461042a578063c45a01551461044a578063c87b56dd1461046a578063d0d3a3b51461048a578063e985e9c5146104aa578063f17970a3146104ca578063f2fde38b14610500575b600080fd5b34801561016d57600080fd5b5061018161017c366004612548565b610520565b005b34801561018f57600080fd5b506101a361019e366004612510565b6105a9565b60405190151581526020015b60405180910390f35b3480156101c457600080fd5b506101cd6105d4565b6040516101af9190612725565b3480156101e657600080fd5b50600d546101fa906001600160a01b031681565b6040516001600160a01b0390911681526020016101af565b34801561021e57600080fd5b506101fa61022d3660046125b4565b610666565b34801561023e57600080fd5b5061018161024d366004612495565b6106ee565b34801561025e57600080fd5b50610268600e5481565b6040519081526020016101af565b34801561028257600080fd5b50610268600f5481565b34801561029857600080fd5b50600854610268565b3480156102ad57600080fd5b506101816102bc366004612350565b6107ff565b3480156102cd57600080fd5b506102686102dc366004612495565b610830565b3480156102ed57600080fd5b506101816102fc366004612350565b6108c6565b34801561030d57600080fd5b5061026861031c3660046125b4565b6108e1565b34801561032d57600080fd5b506101fa61033c3660046125b4565b610982565b34801561034d57600080fd5b5061018161035c3660046122fc565b6109f9565b34801561036d57600080fd5b5061026861037c3660046122fc565b610b0a565b34801561038d57600080fd5b5061026861039c3660046125b4565b60009081526012602052604090205490565b3480156103ba57600080fd5b50610181610b91565b3480156103cf57600080fd5b506101fa610bcc565b610181610bdb565b3480156103ec57600080fd5b506101cd610d9f565b34801561040157600080fd5b506101cd610dae565b34801561041657600080fd5b50610181610425366004612468565b610e3c565b34801561043657600080fd5b50610181610445366004612390565b610e4b565b34801561045657600080fd5b50600c546101fa906001600160a01b031681565b34801561047657600080fd5b506101cd6104853660046125b4565b610e83565b34801561049657600080fd5b506101816104a53660046124c0565b610f5b565b3480156104b657600080fd5b506101a36104c5366004612318565b611025565b3480156104d657600080fd5b506102686104e53660046122fc565b6001600160a01b031660009081526013602052604090205490565b34801561050c57600080fd5b5061018161051b3660046122fc565b611053565b33610529610bcc565b6001600160a01b0316146105585760405162461bcd60e51b815260040161054f9061278a565b60405180910390fd5b61056460108383612263565b508181604051610575929190612676565b604051908190038120907f2f0f14e762c5274a3ae9b9269990e561d7dd65c0e9e42a2062166e4c02996c2a90600090a25050565b60006001600160e01b0319821663780e9d6360e01b14806105ce57506105ce826110f3565b92915050565b6060600080546105e3906128d5565b80601f016020809104026020016040519081016040528092919081815260200182805461060f906128d5565b801561065c5780601f106106315761010080835404028352916020019161065c565b820191906000526020600020905b81548152906001019060200180831161063f57829003601f168201915b5050505050905090565b600061067182611143565b6106d25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161054f565b506000908152600460205260409020546001600160a01b031690565b60006106f982610982565b9050806001600160a01b0316836001600160a01b031614156107675760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161054f565b336001600160a01b038216148061078357506107838133611025565b6107f05760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b606482015260840161054f565b6107fa8383611160565b505050565b61080933826111ce565b6108255760405162461bcd60e51b815260040161054f906127bf565b6107fa838383611298565b600061083b83610b0a565b821061089d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161054f565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6107fa83838360405180602001604052806000815250610e4b565b60006108ec60085490565b821061094f5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161054f565b6008828154811061097057634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806105ce5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161054f565b33610a02610bcc565b6001600160a01b031614610a285760405162461bcd60e51b815260040161054f9061278a565b6002600b541415610a4b5760405162461bcd60e51b815260040161054f90612810565b6002600b556001600160a01b03811660009081526013602052604090205480610a745750610b02565b6001600160a01b038216600081815260136020526040812055610aa057610a9b338261142d565b610ac8565b610ab46001600160a01b038316308361149e565b610ac86001600160a01b0383163383611581565b60405181906001600160a01b0384169033907f0183aa026360b100e08f7ac2c4bf8dd7673236bd0e14b5e70d5fccf7d8cf329190600090a4505b506001600b55565b60006001600160a01b038216610b755760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161054f565b506001600160a01b031660009081526003602052604090205490565b33610b9a610bcc565b6001600160a01b031614610bc05760405162461bcd60e51b815260040161054f9061278a565b610bca60006115a0565b565b600a546001600160a01b031690565b6002600b541415610bfe5760405162461bcd60e51b815260040161054f90612810565b6002600b819055506000806000600c60009054906101000a90046001600160a01b03166001600160a01b0316636df8fd3f6040518163ffffffff1660e01b815260040160806040518083038186803b158015610c5957600080fd5b505afa158015610c6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9191906125e4565b5092509250925060008360001415610cab57506000610ccd565b610cca83610cc486600e546115f290919063ffffffff16565b906115fe565b90505b600e54600090610cdd908361160a565b600d546001600160a01b0316600090815260136020526040902054909150610d059082611616565b600d80546001600160a01b039081166000908152601360205260409020929092555416610d8057600e543414610d715760405162461bcd60e51b8152602060048201526011602482015270141c9a58d9481b9bdd081b585d18da1959607a1b604482015260640161054f565b610d7b838361142d565b610d8b565b610d8b818385611622565b610d9361175f565b50506001600b55505050565b6060600180546105e3906128d5565b60108054610dbb906128d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610de7906128d5565b8015610e345780601f10610e0957610100808354040283529160200191610e34565b820191906000526020600020905b815481529060010190602001808311610e1757829003601f168201915b505050505081565b610e47338383611898565b5050565b610e5533836111ce565b610e715760405162461bcd60e51b815260040161054f906127bf565b610e7d84848484611963565b50505050565b6060610e8e82611143565b610ef25760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161054f565b6000610f0960408051602081019091526000815290565b90506000815111610f295760405180602001604052806000815250610f54565b80610f3384611996565b604051602001610f44929190612686565b6040516020818303038152906040525b9392505050565b33610f64610bcc565b6001600160a01b031614610f8a5760405162461bcd60e51b815260040161054f9061278a565b60008111610fcb5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c195c9a5bd960921b604482015260640161054f565b600d80546001600160a01b0319166001600160a01b038516908117909155600e839055600f829055604051829184917f706e3c92973276fbc92a98f4323c1d9e15f08c95a4886f2e8d183e5deff62bc390600090a4505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3361105c610bcc565b6001600160a01b0316146110825760405162461bcd60e51b815260040161054f9061278a565b6001600160a01b0381166110e75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161054f565b6110f0816115a0565b50565b60006001600160e01b031982166380ac58cd60e01b148061112457506001600160e01b03198216635b5e139f60e01b145b806105ce57506301ffc9a760e01b6001600160e01b03198316146105ce565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061119582610982565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006111d982611143565b61123a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161054f565b600061124583610982565b9050806001600160a01b0316846001600160a01b031614806112805750836001600160a01b031661127584610666565b6001600160a01b0316145b8061129057506112908185611025565b949350505050565b826001600160a01b03166112ab82610982565b6001600160a01b03161461130f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161054f565b6001600160a01b0382166113715760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161054f565b61137c838383611aaf565b611387600082611160565b6001600160a01b03831660009081526003602052604081208054600192906113b0908490612892565b90915550506001600160a01b03821660009081526003602052604081208054600192906113de908490612847565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716916000805160206129bb83398151915291a4505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461147a576040519150601f19603f3d011682016040523d82523d6000602084013e61147f565b606091505b50509050806107fa57634e487b7160e01b600052600160045260246000fd5b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b81526004016114cf9291906126b5565b60206040518083038186803b1580156114e757600080fd5b505afa1580156114fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151f91906125cc565b6115299190612847565b9050610e7d8463095ea7b360e01b858460405160240161154a92919061270c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611b67565b6107fa8363a9059cbb60e01b848460405160240161154a92919061270c565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610f548284612873565b6000610f54828461285f565b6000610f548284612892565b6000610f548284612847565b34156116635760405162461bcd60e51b815260206004820152601060248201526f115512081b9bdd081858d8d95c1d195960821b604482015260640161054f565b600e54600d54604051636eb1769f60e11b81526001600160a01b039091169063dd62ed3e9061169890339030906004016126b5565b60206040518083038186803b1580156116b057600080fd5b505afa1580156116c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e891906125cc565b101561172f5760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b604482015260640161054f565b600d54611747906001600160a01b0316333086611c39565b600d546107fa906001600160a01b0316338385611c39565b600161176a33610b0a565b11156117a95760405162461bcd60e51b815260206004820152600e60248201526d4475706c6963617465204e46547360901b604482015260640161054f565b6000806117b533610b0a565b600114156117cf576117c8336000610830565b90506117e0565b50506011546001906117e033611c71565b6000818152601260205260409020544381111561180c57600f54611805908290611616565b905061181d565b600f5461181a904390611616565b90505b6000828152601260205260409020819055821561186657604051819083907f72c19717536694464afff634fc737dc627dfe3dc6a4119cca3b1b67c6b3b4e9c90600090a3505050565b604051819083907f956bf2a86df7fecbd0dae77af9b40f464a19669615c5fb346788f0e61ddda5ad90600090a3505050565b816001600160a01b0316836001600160a01b031614156118f65760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640161054f565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61196e848484611298565b61197a84848484611c96565b610e7d5760405162461bcd60e51b815260040161054f90612738565b6060816119ba5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156119e457806119ce81612910565b91506119dd9050600a8361285f565b91506119be565b6000816001600160401b03811115611a0c57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611a36576020820181803683370190505b5090505b841561129057611a4b600183612892565b9150611a58600a8661292b565b611a63906030612847565b60f81b818381518110611a8657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611aa8600a8661285f565b9450611a3a565b6001600160a01b038316611b0a57611b0581600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611b2d565b816001600160a01b0316836001600160a01b031614611b2d57611b2d8382611daa565b6001600160a01b038216611b44576107fa81611e47565b826001600160a01b0316826001600160a01b0316146107fa576107fa8282611f20565b6000611bbc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f649092919063ffffffff16565b8051909150156107fa5780806020019051810190611bda91906124f4565b6107fa5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161054f565b6040516001600160a01b0380851660248301528316604482015260648101829052610e7d9085906323b872dd60e01b9060840161154a565b6000611c7c60115490565b9050611c8c601180546001019055565b610e478282611f73565b6000611caa846001600160a01b0316611f8d565b15611d9f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611ce19033908990889088906004016126cf565b602060405180830381600087803b158015611cfb57600080fd5b505af1925050508015611d2b575060408051601f3d908101601f19168201909252611d289181019061252c565b60015b611d85573d808015611d59576040519150601f19603f3d011682016040523d82523d6000602084013e611d5e565b606091505b508051611d7d5760405162461bcd60e51b815260040161054f90612738565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611290565b506001949350505050565b60006001611db784610b0a565b611dc19190612892565b600083815260076020526040902054909150808214611e14576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611e5990600190612892565b60008381526009602052604081205460088054939450909284908110611e8f57634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110611ebe57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611f0457634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000611f2b83610b0a565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60606112908484600085611f9c565b610e478282604051806020016040528060008152506120cb565b6001600160a01b03163b151590565b606082471015611ffd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161054f565b61200685611f8d565b6120525760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161054f565b600080866001600160a01b0316858760405161206e919061265a565b60006040518083038185875af1925050503d80600081146120ab576040519150601f19603f3d011682016040523d82523d6000602084013e6120b0565b606091505b50915091506120c08282866120fe565b979650505050505050565b6120d58383612137565b6120e26000848484611c96565b6107fa5760405162461bcd60e51b815260040161054f90612738565b6060831561210d575081610f54565b82511561211d5782518084602001fd5b8160405162461bcd60e51b815260040161054f9190612725565b6001600160a01b03821661218d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161054f565b61219681611143565b156121e25760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b604482015260640161054f565b6121ee60008383611aaf565b6001600160a01b0382166000908152600360205260408120805460019290612217908490612847565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392906000805160206129bb833981519152908290a45050565b82805461226f906128d5565b90600052602060002090601f01602090048101928261229157600085556122d7565b82601f106122aa5782800160ff198235161785556122d7565b828001600101855582156122d7579182015b828111156122d75782358255916020019190600101906122bc565b506122e39291506122e7565b5090565b5b808211156122e357600081556001016122e8565b60006020828403121561230d578081fd5b8135610f5481612981565b6000806040838503121561232a578081fd5b823561233581612981565b9150602083013561234581612981565b809150509250929050565b600080600060608486031215612364578081fd5b833561236f81612981565b9250602084013561237f81612981565b929592945050506040919091013590565b600080600080608085870312156123a5578081fd5b84356123b081612981565b935060208501356123c081612981565b92506040850135915060608501356001600160401b03808211156123e2578283fd5b818701915087601f8301126123f5578283fd5b8135818111156124075761240761296b565b604051601f8201601f19908116603f0116810190838211818310171561242f5761242f61296b565b816040528281528a6020848701011115612447578586fd5b82602086016020830137918201602001949094529598949750929550505050565b6000806040838503121561247a578182fd5b823561248581612981565b9150602083013561234581612996565b600080604083850312156124a7578182fd5b82356124b281612981565b946020939093013593505050565b6000806000606084860312156124d4578283fd5b83356124df81612981565b95602085013595506040909401359392505050565b600060208284031215612505578081fd5b8151610f5481612996565b600060208284031215612521578081fd5b8135610f54816129a4565b60006020828403121561253d578081fd5b8151610f54816129a4565b6000806020838503121561255a578182fd5b82356001600160401b0380821115612570578384fd5b818501915085601f830112612583578384fd5b813581811115612591578485fd5b8660208285010111156125a2578485fd5b60209290920196919550909350505050565b6000602082840312156125c5578081fd5b5035919050565b6000602082840312156125dd578081fd5b5051919050565b600080600080608085870312156125f9578182fd5b8451935060208501519250604085015161261281612981565b606086015190925061262381612981565b939692955090935050565b600081518084526126468160208601602086016128a9565b601f01601f19169290920160200192915050565b6000825161266c8184602087016128a9565b9190910192915050565b8183823760009101908152919050565b600083516126988184602088016128a9565b8351908301906126ac8183602088016128a9565b01949350505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906127029083018461262e565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b602081526000610f54602083018461262e565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000821982111561285a5761285a61293f565b500190565b60008261286e5761286e612955565b500490565b600081600019048311821515161561288d5761288d61293f565b500290565b6000828210156128a4576128a461293f565b500390565b60005b838110156128c45781810151838201526020016128ac565b83811115610e7d5750506000910152565b600181811c908216806128e957607f821691505b6020821081141561290a57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156129245761292461293f565b5060010190565b60008261293a5761293a612955565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146110f057600080fd5b80151581146110f057600080fd5b6001600160e01b0319811681146110f057600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220ddef89045447c80080bc4e74212119760a4e1309ffcb637672ea9383534ed63164736f6c63430008040033a2646970667358221220c0e2765e2b9828e80e445c6bb6b92f0812e6ac48e523caa32dbf3e8890be393164736f6c63430008040033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000465760003560e01c80636df8fd3f146200004b5780639627a2e3146200008b578063d9e87c4a14620000a4575b600080fd5b6000546001546002546003546040805194855260208501939093526001600160a01b03918216928401929092521660608201526080015b60405180910390f35b620000a26200009c36600462000471565b620000d4565b005b620000bb620000b5366004620003d8565b6200018f565b6040516001600160a01b03909116815260200162000082565b6003546001600160a01b03163314620001245760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b60448201526064015b60405180910390fd5b62000132848484846200021c565b806001600160a01b0316826001600160a01b03167f1f1a6e9cda3dbc1ab1cd61b7e88be1d2e08fe0604b708e0385810599f1b64a48868660405162000181929190918252602082015260400190565b60405180910390a350505050565b60008088888888888888604051620001a79062000364565b620001b99796959493929190620004e4565b604051809103906000f080158015620001d6573d6000803e3d6000fd5b506040519091506001600160a01b0382169033907fb318a2b19279938a77fca24073110805b3b1d7c0b96651e064ad4d536ec1d33590600090a398975050505050505050565b60008311620002615760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b210333930b1ba34b7b760811b60448201526064016200011b565b6000841180156200027957506001600160a01b038216155b15620002bb5760405162461bcd60e51b815260206004820152601060248201526f43616e6e6f74206275726e206665657360801b60448201526064016200011b565b6001600160a01b038116620003045760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b2ba3a32b960911b60448201526064016200011b565b60408051608081018252858152602081018590526001600160a01b03938416918101829052919092166060909101819052600093909355600191909155600280546001600160a01b03199081169092179055600380549091169091179055565b612f22806200053983390190565b80356001600160a01b03811681146200038a57600080fd5b919050565b60008083601f840112620003a1578182fd5b5081356001600160401b03811115620003b8578182fd5b602083019150836020828501011115620003d157600080fd5b9250929050565b600080600080600080600060a0888a031215620003f3578283fd5b87356001600160401b03808211156200040a578485fd5b620004188b838c016200038f565b909950975060208a013591508082111562000431578485fd5b50620004408a828b016200038f565b90965094506200045590506040890162000372565b9250606088013591506080880135905092959891949750929550565b6000806000806080858703121562000487578384fd5b8435935060208501359250620004a06040860162000372565b9150620004b06060860162000372565b905092959194509250565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60a081526000620004fa60a08301898b620004bb565b82810360208401526200050f81888a620004bb565b6001600160a01b039690961660408401525050606081019290925260809091015294935050505056fe60806040523480156200001157600080fd5b5060405162002f2238038062002f22833981016040819052620000349162000415565b8351849086906200004d906000906020850190620002bc565b50805162000063906001906020840190620002bc565b505050620000806200007a6200019560201b60201c565b62000199565b6001600b558451620000c85760405162461bcd60e51b815260206004820152600c60248201526b115b5c1d1e481cde5b589bdb60a21b60448201526064015b60405180910390fd5b8351620001055760405162461bcd60e51b815260206004820152600a602482015269456d707479206e616d6560b01b6044820152606401620000bf565b60008111620001485760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c195c9a5bd960921b6044820152606401620000bf565b600c80546001600160a01b031916331790556200016532620001eb565b600d80546001600160a01b0319166001600160a01b039490941693909317909255600e55600f5550620005029050565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600a546001600160a01b03163314620002475760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000bf565b6001600160a01b038116620002ae5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620000bf565b620002b98162000199565b50565b828054620002ca90620004af565b90600052602060002090601f016020900481019282620002ee576000855562000339565b82601f106200030957805160ff191683800117855562000339565b8280016001018555821562000339579182015b82811115620003395782518255916020019190600101906200031c565b50620003479291506200034b565b5090565b5b808211156200034757600081556001016200034c565b600082601f83011262000373578081fd5b81516001600160401b0380821115620003905762000390620004ec565b604051601f8301601f19908116603f01168101908282118183101715620003bb57620003bb620004ec565b81604052838152602092508683858801011115620003d7578485fd5b8491505b83821015620003fa5785820183015181830184015290820190620003db565b838211156200040b57848385830101525b9695505050505050565b600080600080600060a086880312156200042d578081fd5b85516001600160401b038082111562000444578283fd5b6200045289838a0162000362565b9650602088015191508082111562000468578283fd5b50620004778882890162000362565b604088015190955090506001600160a01b038116811462000496578182fd5b6060870151608090970151959894975095949392505050565b600181811c90821680620004c457607f821691505b60208210811415620004e657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b612a1080620005126000396000f3fe60806040526004361061015c5760003560e01c80629299e31461016157806301ffc9a71461018357806306fdde03146101b8578063079a361a146101da578063081812fc14610212578063095ea7b3146102325780630de3226b146102525780630fce16961461027657806318160ddd1461028c57806323b872dd146102a15780632f745c59146102c157806342842e0e146102e15780634f6ccce7146103015780636352211e146103215780636533fce61461034157806370a082311461036157806370fa23c714610381578063715018a6146103ae5780638da5cb5b146103c35780638f449a05146103d857806395d89b41146103e0578063963310af146103f5578063a22cb4651461040a578063b88d4fde1461042a578063c45a01551461044a578063c87b56dd1461046a578063d0d3a3b51461048a578063e985e9c5146104aa578063f17970a3146104ca578063f2fde38b14610500575b600080fd5b34801561016d57600080fd5b5061018161017c366004612548565b610520565b005b34801561018f57600080fd5b506101a361019e366004612510565b6105a9565b60405190151581526020015b60405180910390f35b3480156101c457600080fd5b506101cd6105d4565b6040516101af9190612725565b3480156101e657600080fd5b50600d546101fa906001600160a01b031681565b6040516001600160a01b0390911681526020016101af565b34801561021e57600080fd5b506101fa61022d3660046125b4565b610666565b34801561023e57600080fd5b5061018161024d366004612495565b6106ee565b34801561025e57600080fd5b50610268600e5481565b6040519081526020016101af565b34801561028257600080fd5b50610268600f5481565b34801561029857600080fd5b50600854610268565b3480156102ad57600080fd5b506101816102bc366004612350565b6107ff565b3480156102cd57600080fd5b506102686102dc366004612495565b610830565b3480156102ed57600080fd5b506101816102fc366004612350565b6108c6565b34801561030d57600080fd5b5061026861031c3660046125b4565b6108e1565b34801561032d57600080fd5b506101fa61033c3660046125b4565b610982565b34801561034d57600080fd5b5061018161035c3660046122fc565b6109f9565b34801561036d57600080fd5b5061026861037c3660046122fc565b610b0a565b34801561038d57600080fd5b5061026861039c3660046125b4565b60009081526012602052604090205490565b3480156103ba57600080fd5b50610181610b91565b3480156103cf57600080fd5b506101fa610bcc565b610181610bdb565b3480156103ec57600080fd5b506101cd610d9f565b34801561040157600080fd5b506101cd610dae565b34801561041657600080fd5b50610181610425366004612468565b610e3c565b34801561043657600080fd5b50610181610445366004612390565b610e4b565b34801561045657600080fd5b50600c546101fa906001600160a01b031681565b34801561047657600080fd5b506101cd6104853660046125b4565b610e83565b34801561049657600080fd5b506101816104a53660046124c0565b610f5b565b3480156104b657600080fd5b506101a36104c5366004612318565b611025565b3480156104d657600080fd5b506102686104e53660046122fc565b6001600160a01b031660009081526013602052604090205490565b34801561050c57600080fd5b5061018161051b3660046122fc565b611053565b33610529610bcc565b6001600160a01b0316146105585760405162461bcd60e51b815260040161054f9061278a565b60405180910390fd5b61056460108383612263565b508181604051610575929190612676565b604051908190038120907f2f0f14e762c5274a3ae9b9269990e561d7dd65c0e9e42a2062166e4c02996c2a90600090a25050565b60006001600160e01b0319821663780e9d6360e01b14806105ce57506105ce826110f3565b92915050565b6060600080546105e3906128d5565b80601f016020809104026020016040519081016040528092919081815260200182805461060f906128d5565b801561065c5780601f106106315761010080835404028352916020019161065c565b820191906000526020600020905b81548152906001019060200180831161063f57829003601f168201915b5050505050905090565b600061067182611143565b6106d25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161054f565b506000908152600460205260409020546001600160a01b031690565b60006106f982610982565b9050806001600160a01b0316836001600160a01b031614156107675760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161054f565b336001600160a01b038216148061078357506107838133611025565b6107f05760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b606482015260840161054f565b6107fa8383611160565b505050565b61080933826111ce565b6108255760405162461bcd60e51b815260040161054f906127bf565b6107fa838383611298565b600061083b83610b0a565b821061089d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161054f565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6107fa83838360405180602001604052806000815250610e4b565b60006108ec60085490565b821061094f5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161054f565b6008828154811061097057634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806105ce5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161054f565b33610a02610bcc565b6001600160a01b031614610a285760405162461bcd60e51b815260040161054f9061278a565b6002600b541415610a4b5760405162461bcd60e51b815260040161054f90612810565b6002600b556001600160a01b03811660009081526013602052604090205480610a745750610b02565b6001600160a01b038216600081815260136020526040812055610aa057610a9b338261142d565b610ac8565b610ab46001600160a01b038316308361149e565b610ac86001600160a01b0383163383611581565b60405181906001600160a01b0384169033907f0183aa026360b100e08f7ac2c4bf8dd7673236bd0e14b5e70d5fccf7d8cf329190600090a4505b506001600b55565b60006001600160a01b038216610b755760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161054f565b506001600160a01b031660009081526003602052604090205490565b33610b9a610bcc565b6001600160a01b031614610bc05760405162461bcd60e51b815260040161054f9061278a565b610bca60006115a0565b565b600a546001600160a01b031690565b6002600b541415610bfe5760405162461bcd60e51b815260040161054f90612810565b6002600b819055506000806000600c60009054906101000a90046001600160a01b03166001600160a01b0316636df8fd3f6040518163ffffffff1660e01b815260040160806040518083038186803b158015610c5957600080fd5b505afa158015610c6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9191906125e4565b5092509250925060008360001415610cab57506000610ccd565b610cca83610cc486600e546115f290919063ffffffff16565b906115fe565b90505b600e54600090610cdd908361160a565b600d546001600160a01b0316600090815260136020526040902054909150610d059082611616565b600d80546001600160a01b039081166000908152601360205260409020929092555416610d8057600e543414610d715760405162461bcd60e51b8152602060048201526011602482015270141c9a58d9481b9bdd081b585d18da1959607a1b604482015260640161054f565b610d7b838361142d565b610d8b565b610d8b818385611622565b610d9361175f565b50506001600b55505050565b6060600180546105e3906128d5565b60108054610dbb906128d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610de7906128d5565b8015610e345780601f10610e0957610100808354040283529160200191610e34565b820191906000526020600020905b815481529060010190602001808311610e1757829003601f168201915b505050505081565b610e47338383611898565b5050565b610e5533836111ce565b610e715760405162461bcd60e51b815260040161054f906127bf565b610e7d84848484611963565b50505050565b6060610e8e82611143565b610ef25760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161054f565b6000610f0960408051602081019091526000815290565b90506000815111610f295760405180602001604052806000815250610f54565b80610f3384611996565b604051602001610f44929190612686565b6040516020818303038152906040525b9392505050565b33610f64610bcc565b6001600160a01b031614610f8a5760405162461bcd60e51b815260040161054f9061278a565b60008111610fcb5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c195c9a5bd960921b604482015260640161054f565b600d80546001600160a01b0319166001600160a01b038516908117909155600e839055600f829055604051829184917f706e3c92973276fbc92a98f4323c1d9e15f08c95a4886f2e8d183e5deff62bc390600090a4505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3361105c610bcc565b6001600160a01b0316146110825760405162461bcd60e51b815260040161054f9061278a565b6001600160a01b0381166110e75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161054f565b6110f0816115a0565b50565b60006001600160e01b031982166380ac58cd60e01b148061112457506001600160e01b03198216635b5e139f60e01b145b806105ce57506301ffc9a760e01b6001600160e01b03198316146105ce565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061119582610982565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006111d982611143565b61123a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161054f565b600061124583610982565b9050806001600160a01b0316846001600160a01b031614806112805750836001600160a01b031661127584610666565b6001600160a01b0316145b8061129057506112908185611025565b949350505050565b826001600160a01b03166112ab82610982565b6001600160a01b03161461130f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161054f565b6001600160a01b0382166113715760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161054f565b61137c838383611aaf565b611387600082611160565b6001600160a01b03831660009081526003602052604081208054600192906113b0908490612892565b90915550506001600160a01b03821660009081526003602052604081208054600192906113de908490612847565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716916000805160206129bb83398151915291a4505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461147a576040519150601f19603f3d011682016040523d82523d6000602084013e61147f565b606091505b50509050806107fa57634e487b7160e01b600052600160045260246000fd5b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b81526004016114cf9291906126b5565b60206040518083038186803b1580156114e757600080fd5b505afa1580156114fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151f91906125cc565b6115299190612847565b9050610e7d8463095ea7b360e01b858460405160240161154a92919061270c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611b67565b6107fa8363a9059cbb60e01b848460405160240161154a92919061270c565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610f548284612873565b6000610f54828461285f565b6000610f548284612892565b6000610f548284612847565b34156116635760405162461bcd60e51b815260206004820152601060248201526f115512081b9bdd081858d8d95c1d195960821b604482015260640161054f565b600e54600d54604051636eb1769f60e11b81526001600160a01b039091169063dd62ed3e9061169890339030906004016126b5565b60206040518083038186803b1580156116b057600080fd5b505afa1580156116c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e891906125cc565b101561172f5760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b604482015260640161054f565b600d54611747906001600160a01b0316333086611c39565b600d546107fa906001600160a01b0316338385611c39565b600161176a33610b0a565b11156117a95760405162461bcd60e51b815260206004820152600e60248201526d4475706c6963617465204e46547360901b604482015260640161054f565b6000806117b533610b0a565b600114156117cf576117c8336000610830565b90506117e0565b50506011546001906117e033611c71565b6000818152601260205260409020544381111561180c57600f54611805908290611616565b905061181d565b600f5461181a904390611616565b90505b6000828152601260205260409020819055821561186657604051819083907f72c19717536694464afff634fc737dc627dfe3dc6a4119cca3b1b67c6b3b4e9c90600090a3505050565b604051819083907f956bf2a86df7fecbd0dae77af9b40f464a19669615c5fb346788f0e61ddda5ad90600090a3505050565b816001600160a01b0316836001600160a01b031614156118f65760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640161054f565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61196e848484611298565b61197a84848484611c96565b610e7d5760405162461bcd60e51b815260040161054f90612738565b6060816119ba5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156119e457806119ce81612910565b91506119dd9050600a8361285f565b91506119be565b6000816001600160401b03811115611a0c57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611a36576020820181803683370190505b5090505b841561129057611a4b600183612892565b9150611a58600a8661292b565b611a63906030612847565b60f81b818381518110611a8657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611aa8600a8661285f565b9450611a3a565b6001600160a01b038316611b0a57611b0581600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611b2d565b816001600160a01b0316836001600160a01b031614611b2d57611b2d8382611daa565b6001600160a01b038216611b44576107fa81611e47565b826001600160a01b0316826001600160a01b0316146107fa576107fa8282611f20565b6000611bbc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f649092919063ffffffff16565b8051909150156107fa5780806020019051810190611bda91906124f4565b6107fa5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161054f565b6040516001600160a01b0380851660248301528316604482015260648101829052610e7d9085906323b872dd60e01b9060840161154a565b6000611c7c60115490565b9050611c8c601180546001019055565b610e478282611f73565b6000611caa846001600160a01b0316611f8d565b15611d9f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611ce19033908990889088906004016126cf565b602060405180830381600087803b158015611cfb57600080fd5b505af1925050508015611d2b575060408051601f3d908101601f19168201909252611d289181019061252c565b60015b611d85573d808015611d59576040519150601f19603f3d011682016040523d82523d6000602084013e611d5e565b606091505b508051611d7d5760405162461bcd60e51b815260040161054f90612738565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611290565b506001949350505050565b60006001611db784610b0a565b611dc19190612892565b600083815260076020526040902054909150808214611e14576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611e5990600190612892565b60008381526009602052604081205460088054939450909284908110611e8f57634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110611ebe57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611f0457634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000611f2b83610b0a565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60606112908484600085611f9c565b610e478282604051806020016040528060008152506120cb565b6001600160a01b03163b151590565b606082471015611ffd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161054f565b61200685611f8d565b6120525760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161054f565b600080866001600160a01b0316858760405161206e919061265a565b60006040518083038185875af1925050503d80600081146120ab576040519150601f19603f3d011682016040523d82523d6000602084013e6120b0565b606091505b50915091506120c08282866120fe565b979650505050505050565b6120d58383612137565b6120e26000848484611c96565b6107fa5760405162461bcd60e51b815260040161054f90612738565b6060831561210d575081610f54565b82511561211d5782518084602001fd5b8160405162461bcd60e51b815260040161054f9190612725565b6001600160a01b03821661218d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161054f565b61219681611143565b156121e25760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b604482015260640161054f565b6121ee60008383611aaf565b6001600160a01b0382166000908152600360205260408120805460019290612217908490612847565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392906000805160206129bb833981519152908290a45050565b82805461226f906128d5565b90600052602060002090601f01602090048101928261229157600085556122d7565b82601f106122aa5782800160ff198235161785556122d7565b828001600101855582156122d7579182015b828111156122d75782358255916020019190600101906122bc565b506122e39291506122e7565b5090565b5b808211156122e357600081556001016122e8565b60006020828403121561230d578081fd5b8135610f5481612981565b6000806040838503121561232a578081fd5b823561233581612981565b9150602083013561234581612981565b809150509250929050565b600080600060608486031215612364578081fd5b833561236f81612981565b9250602084013561237f81612981565b929592945050506040919091013590565b600080600080608085870312156123a5578081fd5b84356123b081612981565b935060208501356123c081612981565b92506040850135915060608501356001600160401b03808211156123e2578283fd5b818701915087601f8301126123f5578283fd5b8135818111156124075761240761296b565b604051601f8201601f19908116603f0116810190838211818310171561242f5761242f61296b565b816040528281528a6020848701011115612447578586fd5b82602086016020830137918201602001949094529598949750929550505050565b6000806040838503121561247a578182fd5b823561248581612981565b9150602083013561234581612996565b600080604083850312156124a7578182fd5b82356124b281612981565b946020939093013593505050565b6000806000606084860312156124d4578283fd5b83356124df81612981565b95602085013595506040909401359392505050565b600060208284031215612505578081fd5b8151610f5481612996565b600060208284031215612521578081fd5b8135610f54816129a4565b60006020828403121561253d578081fd5b8151610f54816129a4565b6000806020838503121561255a578182fd5b82356001600160401b0380821115612570578384fd5b818501915085601f830112612583578384fd5b813581811115612591578485fd5b8660208285010111156125a2578485fd5b60209290920196919550909350505050565b6000602082840312156125c5578081fd5b5035919050565b6000602082840312156125dd578081fd5b5051919050565b600080600080608085870312156125f9578182fd5b8451935060208501519250604085015161261281612981565b606086015190925061262381612981565b939692955090935050565b600081518084526126468160208601602086016128a9565b601f01601f19169290920160200192915050565b6000825161266c8184602087016128a9565b9190910192915050565b8183823760009101908152919050565b600083516126988184602088016128a9565b8351908301906126ac8183602088016128a9565b01949350505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906127029083018461262e565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b602081526000610f54602083018461262e565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000821982111561285a5761285a61293f565b500190565b60008261286e5761286e612955565b500490565b600081600019048311821515161561288d5761288d61293f565b500290565b6000828210156128a4576128a461293f565b500390565b60005b838110156128c45781810151838201526020016128ac565b83811115610e7d5750506000910152565b600181811c908216806128e957607f821691505b6020821081141561290a57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156129245761292461293f565b5060010190565b60008261293a5761293a612955565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146110f057600080fd5b80151581146110f057600080fd5b6001600160e01b0319811681146110f057600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220ddef89045447c80080bc4e74212119760a4e1309ffcb637672ea9383534ed63164736f6c63430008040033a2646970667358221220c0e2765e2b9828e80e445c6bb6b92f0812e6ac48e523caa32dbf3e8890be393164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createCommunity(string,string,address,uint256,uint256)": {
        "notice": "Deploy new community"
      },
      "protocolFeePolicy()": {
        "notice": "Get current protocol fee policy"
      },
      "setProtocolFeePolicy(uint256,uint256,address,address)": {
        "notice": "Set protocol fee policy"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3418,
        "contract": "contracts/CommunityFactory.sol:CommunityFactory",
        "label": "_protocolFeePolicy",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(FeePolicy)3415_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_struct(FeePolicy)3415_storage": {
        "encoding": "inplace",
        "label": "struct CommunityFactory.FeePolicy",
        "members": [
          {
            "astId": 3408,
            "contract": "contracts/CommunityFactory.sol:CommunityFactory",
            "label": "feeNumerator",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3410,
            "contract": "contracts/CommunityFactory.sol:CommunityFactory",
            "label": "feeDenominator",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3412,
            "contract": "contracts/CommunityFactory.sol:CommunityFactory",
            "label": "receiver",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3414,
            "contract": "contracts/CommunityFactory.sol:CommunityFactory",
            "label": "setter",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}